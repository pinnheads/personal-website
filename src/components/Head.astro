---
import '../styles/global.css';

interface Props {
    title?: string | undefined;
    description?: string | undefined;
}

const { getData } = Astro.locals;
const data = await getData('basics');

const { title = `${data.name} - ${data.label}`, description = `${data.summary}` } = Astro.props;
---

<meta charset='UTF-8' />
<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content="https://utsavdeep.com/" />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content="https://raw.githubusercontent.com/pinnheads/personal-website/main/src/assets/site-preview.png" />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content="https://utsavdeep.com/" />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content="https://raw.githubusercontent.com/pinnheads/personal-website/main/src/assets/site-preview.png" />

<!-- Favicon -->
<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
<link rel="manifest" href="/site.webmanifest">
<link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5">
<meta name="msapplication-TileColor" content="#ffffff">
<meta name="theme-color" content="#ffffff">

<meta name='viewport' content='width=device-width' />
<meta name='generator' content={Astro.generator} />
<title>{title}</title>

<script is:inline>
    // This code is inlined in the head to make dark mode instant & blocking.
    const getThemePreference = () => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
            return localStorage.getItem('theme');
        }
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    };
    const isDark = getThemePreference() === 'dark';
    console.log(isDark);
    document.documentElement.classList[isDark ? 'add' : 'remove']('dark');

    if (typeof localStorage !== 'undefined') {
        // Watch the document element and persist user preference when it changes.
        const observer = new MutationObserver(() => {
            const isDark = document.documentElement.classList.contains('dark');
            localStorage.setItem('theme', isDark ? 'dark' : 'light');
        });
        observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
    }
</script>
